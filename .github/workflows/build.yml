name: Quotly Build Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions: read-all

jobs:
  run_integration_tests:
    runs-on: self-hosted
    env:
      RUNNER_TOOL_CACHE: /toolcache

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Lint Dockerfile
        uses: super-linter/super-linter@v7.1.0
        env:
          DEFAULT_BRANCH: origin/main
          GITHUB_TOKEN: ${{ secrets.QUOTLY_TOKEN }}
          FILTER_REGEX_INCLUDE: .*[Dd]ockerfile$
          VALIDATE_DOCKERFILE: true

      - name: Lint Java
        uses: super-linter/super-linter@v7.1.0
        env:
          DEFAULT_BRANCH: origin/main
          GITHUB_TOKEN: ${{ secrets.QUOTLY_TOKEN }}
          FILTER_REGEX_INCLUDE: src/.*\.java$
          VALIDATE_JAVA: true

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Run backend tests
        run: |
          chmod +x mvnw
          ./mvnw test

  build_and_push_docker_image:
    runs-on: self-hosted
    needs: run_integration_tests
    env:
      RUNNER_TOOL_CACHE: /toolcache

    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Generate docker image tag
        id: tag
        run: |
          REPOSITORY_OWNER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')
          
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          BRANCH_NAME=${BRANCH_NAME/'/#'/-}
          BRANCH_NAME=${BRANCH_NAME//[^a-zA-Z0-9-]/}
          
          if [ "$BRANCH_NAME" == "main" ]; then
          DATE_TAG=$(date +'%Y.%m')
          BUILD_NUMBER=$(echo $GITHUB_RUN_NUMBER)
          DOCKER_IMAGE_TAG="${DATE_TAG}.${BUILD_NUMBER}"
          DOCKER_IMAGE_NAME="ghcr.io/${REPOSITORY_OWNER}/quotly-release"
          else
          BUILD_NUMBER=$(echo $GITHUB_RUN_NUMBER)
          DOCKER_IMAGE_TAG="${BRANCH_NAME}.${BUILD_NUMBER}"
          DOCKER_IMAGE_NAME="ghcr.io/${REPOSITORY_OWNER}/quotly-staging"
          fi
          
          echo "DOCKER_IMAGE_TAG=$DOCKER_IMAGE_TAG" >> $GITHUB_ENV
          echo "DOCKER_IMAGE_NAME=$DOCKER_IMAGE_NAME" >> $GITHUB_ENV

      - name: Build backend
        run: |
          chmod +x mvnw
          ./mvnw clean
          ./mvnw versions:set -DnewVersion=${{ env.DOCKER_IMAGE_TAG }}
          ./mvnw package -Dquarkus.package.jar.type=uber-jar -DskipTests

      - name: Build Docker image
        run: |
          TAG=${{ env.DOCKER_IMAGE_TAG }}
          docker build -t quotly:$TAG .

      - name: Login to Github Packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.QUOTLY_TOKEN }}

      - name: Push Docker image
        run: |
          DOCKER_IMAGE_TAG=${{ env.DOCKER_IMAGE_TAG }}
          DOCKER_IMAGE_NAME=${{ env.DOCKER_IMAGE_NAME }}
          docker tag quotly:$DOCKER_IMAGE_TAG $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
          docker push $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG

      - name: Install dependency for cleanup
        if: endsWith(env.DOCKER_IMAGE_NAME, 'staging')
        run: |
          apt-get update
          apt-get install -y jq

      - name: Clean up old staging images
        if: endsWith(env.DOCKER_IMAGE_NAME, 'staging')
        run: |
          REPO_OWNER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')
          REPO_NAME=quotly-staging
          TOKEN=${{ secrets.QUOTLY_TOKEN }}

          # Get all package versions (tags) along with their creation dates from the GitHub Container Registry
          VERSIONS=$(curl -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/orgs/$REPO_OWNER/packages/container/$REPO_NAME/versions)

          # Extract the tag names and created_at timestamps
          TAGS_WITH_DATES=$(echo "$VERSIONS" | jq -r '.[] | "\(.name) \(.created_at)"')

          echo -e "Found tags with timestamps:\n$TAGS_WITH_DATES"

          # Sort the tags by creation date (newest first) and keep the latest 5
          TAGS_TO_DELETE=$(echo "$TAGS_WITH_DATES" | sort -k2,2r | tail -n +6 | awk '{print $1}')

          echo -e "Tags to delete:\n$TAGS_TO_DELETE"

          # Delete the older tags
          for TAG in $TAGS_TO_DELETE; do        
            echo "Deleting $TAG"

            # Get the version ID of the tag
            VERSION_ID=$(echo "$VERSIONS" | jq -r ".[] | select(.name==\"$TAG\") | .id")

            if [ -n "$VERSION_ID" ]; then
              # Delete the version using its ID
              curl -X DELETE \
                -H "Authorization: Bearer $TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/orgs/$REPO_OWNER/packages/container/$REPO_NAME/versions/$VERSION_ID
              echo "Deleted $TAG (ID: $VERSION_ID)"
            else
              echo "Failed to get version ID for $TAG"
            fi
          done